npx postcss tailwind.css -o ./src/lightswind.css
npx terser tailwind.js --compress --mangle --output ./src/lightswind.min.js


# npm Publish Guide

## 1. Preparing Your Package for npm
Before you can publish your package to npm, ensure that it’s ready for distribution. Follow these steps:

### 1.1. Create a package.json file
If you don't already have a `package.json` file in your project, generate one using:

```bash
npm init
```

This command will prompt you to fill in various fields such as the name, version, description, entry point, repository URL, etc. It will create a `package.json` file with the relevant metadata.

### 1.2. Versioning
Ensure you have the correct version number in your `package.json`. The version number follows Semantic Versioning (semver):

- **Major version**: Incremented for breaking changes.
- **Minor version**: Incremented for new features, but backward-compatible.
- **Patch version**: Incremented for backward-compatible bug fixes.

Example: 

```json
{
  "name": "my-package",
  "version": "1.0.0"
}
```

### 1.3. Add a `.npmignore` file (optional)
Similar to `.gitignore`, this file specifies which files and directories should **not** be included in the published package.

Example `.npmignore`:

```
node_modules/
test/
logs/
```

If you don’t create an `.npmignore` file, npm will use `.gitignore` to determine which files to exclude.

---

## 2. Publish to npm

### 2.1. Create an npm account
Before publishing a package, you need to have an npm account. To create one, run the following command:

```bash
npm adduser
```

This will prompt you to provide your npm username, password, and email.

### 2.2. Log in to npm
Once you have an account, log in by running:

```bash
npm login
```

You’ll need to enter your credentials (username, password, and email). After logging in, your credentials will be stored locally.

### 2.3. Publish the Package
To publish the package, navigate to the root directory of your package (where `package.json` is located) and run:

```bash
npm publish
```

This will publish your package to npm. By default, it publishes the package to the **public registry**.

### 2.4. Publish with a Tag (optional)
You can publish your package under a specific tag (useful for pre-release versions or beta):

```bash
npm publish --tag beta
```

This will publish your package with the `beta` tag, so users can install it by specifying the tag:

```bash
npm install my-package@beta
```

